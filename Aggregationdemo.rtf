{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
In this technique, all objects have their separate lifecycle. However, there is ownership such that child object can\'92t belong to another parent object.\
For example consider class/objects department and teacher. Here, a single teacher can\'92t belong to multiple departments, \
but even if we delete the department, the teacher object will never be destroyed.\
*/\
class Address\
\{\
   int streetNum;\
   String city;\
   String state;\
   String country;\
   Address(int street, String c, String st, String coun)\
   \{\
       this.streetNum=street;\
       this.city =c;\
       this.state = st;\
       this.country = coun;\
   \}\
\}\
public class StudentClass\
\{\
   int rollNum;\
   String studentName;\
   //Creating HAS-A relationship with Address class\
   Address studentAddr; \
   StudentClass(int roll, String name, Address addr)\{\
       this.rollNum=roll;\
       this.studentName=name;\
       this.studentAddr = addr;\
   \}\
   public static void main(String args[])\{\
       Address ad = new Address(2108, "Pharmacy Avenue", "Toronto", "Canada");\
       StudentClass obj = new StudentClass(123, "Kirti Parghi", ad);\
       System.out.println(obj.rollNum);\
       System.out.println(obj.studentName);\
       System.out.println(obj.studentAddr.streetNum);\
       System.out.println(obj.studentAddr.city);\
       System.out.println(obj.studentAddr.state);\
       System.out.println(obj.studentAddr.country);\
   \}\
\}}