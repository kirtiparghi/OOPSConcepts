{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Encapsulation is an OOP technique of wrapping the data and code. In this OOPS concept, the variables of a class are always hidden from other classes. \
It can only be accessed using the methods of their current class. For example - in school, a student cannot exist without a class.\
*/\
class EncapsulationDemo\{\
    private int ssn;\
    private String empName;\
    private int empAge;\
\
    //Getter and Setter methods\
    public int getEmpSSN()\{\
        return ssn;\
    \}\
\
    public String getEmpName()\{\
        return empName;\
    \}\
\
    public int getEmpAge()\{\
        return empAge;\
    \}\
\
    public void setEmpAge(int newValue)\{\
        empAge = newValue;\
    \}\
\
    public void setEmpName(String newValue)\{\
        empName = newValue;\
    \}\
\
    public void setEmpSSN(int newValue)\{\
        ssn = newValue;\
    \}\
\}\
public class EncapsTest\{\
    public static void main(String args[])\{\
         EncapsulationDemo obj = new EncapsulationDemo();\
         obj.setEmpName("Mario");\
         obj.setEmpAge(32);\
         obj.setEmpSSN(112233);\
         System.out.println("Employee Name: " + obj.getEmpName());\
         System.out.println("Employee SSN: " + obj.getEmpSSN());\
         System.out.println("Employee Age: " + obj.getEmpAge());\
    \} \
\}}